# This workflow is useful if you want to automate the process of:
#
# a) Creating a new prelease when you push a new tag with a "v" prefix (version).
#
#    This type of prerelease is meant to be used for production: alpha, beta, rc, etc. types of releases.
#    After the prerelease is created, you need to make your changes on the release page at the relevant
#    Github page and publish your release.
#
# b) Creating/updating the "latest" prerelease when you push to your default branch.
#
#    This type of prelease is useful to make your bleeding-edge binaries available to advanced users.
#
# The workflow will not run if there is no tag pushed with a "v" prefix and no change pushed to your 
# default branch.
on: push

jobs:
  golangci:
    name: Run golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: technote-space/get-diff-action@v6.0.1
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
            .github/**
            Makefile
      - name: Get data from build cache
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Linter cache (Linux)
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/golangci-lint
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~\AppData\Local\go-build
          key: ${{ runner.os }}-go-linter-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-linter-${{ matrix.go-version }}-
        if: env.GIT_DIFF
      - name: Run golangci-lint
        run: make lint
        if: env.GIT_DIFF
