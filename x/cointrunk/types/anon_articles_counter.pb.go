// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cointrunk/anon_articles_counter.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AnonArticlesCounter struct {
	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Counter uint64 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *AnonArticlesCounter) Reset()         { *m = AnonArticlesCounter{} }
func (m *AnonArticlesCounter) String() string { return proto.CompactTextString(m) }
func (*AnonArticlesCounter) ProtoMessage()    {}
func (*AnonArticlesCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca7739e73afa5661, []int{0}
}
func (m *AnonArticlesCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonArticlesCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnonArticlesCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnonArticlesCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonArticlesCounter.Merge(m, src)
}
func (m *AnonArticlesCounter) XXX_Size() int {
	return m.Size()
}
func (m *AnonArticlesCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonArticlesCounter.DiscardUnknown(m)
}

var xxx_messageInfo_AnonArticlesCounter proto.InternalMessageInfo

func (m *AnonArticlesCounter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AnonArticlesCounter) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*AnonArticlesCounter)(nil), "bze.cointrunk.AnonArticlesCounter")
}

func init() {
	proto.RegisterFile("cointrunk/anon_articles_counter.proto", fileDescriptor_ca7739e73afa5661)
}

var fileDescriptor_ca7739e73afa5661 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4d, 0xce, 0xcf, 0xcc,
	0x2b, 0x29, 0x2a, 0xcd, 0xcb, 0xd6, 0x4f, 0xcc, 0xcb, 0xcf, 0x8b, 0x4f, 0x2c, 0x2a, 0xc9, 0x4c,
	0xce, 0x49, 0x2d, 0x8e, 0x4f, 0xce, 0x2f, 0xcd, 0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4d, 0xaa, 0x4a, 0xd5, 0x83, 0x2b, 0x55, 0x72, 0xe4, 0x12, 0x76, 0xcc, 0xcb,
	0xcf, 0x73, 0x84, 0x2a, 0x76, 0x86, 0xa8, 0x15, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x94, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x24, 0xb8, 0xd8, 0xa1, 0x06, 0x49, 0x30, 0x29,
	0x30, 0x6a, 0xb0, 0x04, 0xc1, 0xb8, 0x4e, 0x1e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0xa5, 0x97, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x9f, 0x54,
	0x95, 0xaa, 0x9b, 0x98, 0x53, 0x90, 0x91, 0x58, 0x92, 0x9a, 0x08, 0xe6, 0xe9, 0x57, 0xe8, 0x23,
	0x5c, 0x5c, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x76, 0xa2, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x5a, 0x7a, 0x3d, 0xb1, 0xcb, 0x00, 0x00, 0x00,
}

func (m *AnonArticlesCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonArticlesCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonArticlesCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintAnonArticlesCounter(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintAnonArticlesCounter(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnonArticlesCounter(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnonArticlesCounter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnonArticlesCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAnonArticlesCounter(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovAnonArticlesCounter(uint64(m.Counter))
	}
	return n
}

func sovAnonArticlesCounter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnonArticlesCounter(x uint64) (n int) {
	return sovAnonArticlesCounter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnonArticlesCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnonArticlesCounter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonArticlesCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonArticlesCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonArticlesCounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnonArticlesCounter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonArticlesCounter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonArticlesCounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnonArticlesCounter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnonArticlesCounter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnonArticlesCounter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnonArticlesCounter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnonArticlesCounter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnonArticlesCounter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnonArticlesCounter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnonArticlesCounter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnonArticlesCounter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnonArticlesCounter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnonArticlesCounter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnonArticlesCounter = fmt.Errorf("proto: unexpected end of group")
)
