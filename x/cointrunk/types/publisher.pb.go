// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cointrunk/publisher.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Publisher struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Active        bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	ArticlesCount uint32 `protobuf:"varint,4,opt,name=articles_count,json=articlesCount,proto3" json:"articles_count,omitempty"`
	CreatedAt     int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Respect       int64  `protobuf:"varint,6,opt,name=respect,proto3" json:"respect,omitempty"`
}

func (m *Publisher) Reset()         { *m = Publisher{} }
func (m *Publisher) String() string { return proto.CompactTextString(m) }
func (*Publisher) ProtoMessage()    {}
func (*Publisher) Descriptor() ([]byte, []int) {
	return fileDescriptor_13a2ab3c46c6721e, []int{0}
}
func (m *Publisher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Publisher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Publisher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Publisher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publisher.Merge(m, src)
}
func (m *Publisher) XXX_Size() int {
	return m.Size()
}
func (m *Publisher) XXX_DiscardUnknown() {
	xxx_messageInfo_Publisher.DiscardUnknown(m)
}

var xxx_messageInfo_Publisher proto.InternalMessageInfo

func (m *Publisher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Publisher) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Publisher) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Publisher) GetArticlesCount() uint32 {
	if m != nil {
		return m.ArticlesCount
	}
	return 0
}

func (m *Publisher) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Publisher) GetRespect() int64 {
	if m != nil {
		return m.Respect
	}
	return 0
}

func init() {
	proto.RegisterType((*Publisher)(nil), "bze.cointrunk.v1.Publisher")
}

func init() { proto.RegisterFile("cointrunk/publisher.proto", fileDescriptor_13a2ab3c46c6721e) }

var fileDescriptor_13a2ab3c46c6721e = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x41, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0x1b, 0x67, 0xac, 0x36, 0x30, 0x22, 0x59, 0x48, 0x5c, 0x18, 0x8a, 0x20, 0x74, 0x63,
	0x8b, 0x78, 0x02, 0x75, 0xe3, 0x52, 0xba, 0x74, 0x33, 0xa4, 0xe9, 0xc3, 0x06, 0x3b, 0x4d, 0x48,
	0x5e, 0x07, 0x9d, 0x53, 0x78, 0x15, 0x6f, 0xe1, 0x72, 0x96, 0x2e, 0xa5, 0xbd, 0x88, 0x4c, 0x98,
	0xea, 0xee, 0x7d, 0xdf, 0xff, 0xe0, 0x87, 0x9f, 0x9e, 0x2b, 0xa3, 0x3b, 0x74, 0x7d, 0xf7, 0x5a,
	0xd8, 0xbe, 0x6a, 0xb5, 0x6f, 0xc0, 0xe5, 0xd6, 0x19, 0x34, 0xec, 0xb4, 0xda, 0x40, 0xfe, 0x17,
	0xe7, 0xeb, 0x9b, 0xcb, 0x4f, 0x42, 0x93, 0xa7, 0xe9, 0x8b, 0x31, 0x3a, 0xef, 0xe4, 0x0a, 0x38,
	0x49, 0x49, 0x96, 0x94, 0xe1, 0x66, 0x9c, 0x1e, 0xc9, 0xba, 0x76, 0xe0, 0x3d, 0x3f, 0x08, 0x7a,
	0x42, 0x76, 0x46, 0x63, 0xa9, 0x50, 0xaf, 0x81, 0xcf, 0x52, 0x92, 0x1d, 0x97, 0x7b, 0x62, 0x57,
	0xf4, 0x44, 0x3a, 0xd4, 0xaa, 0x05, 0xbf, 0x54, 0xa6, 0xef, 0x90, 0xcf, 0x53, 0x92, 0x2d, 0xca,
	0xc5, 0x64, 0x1f, 0x76, 0x92, 0x5d, 0x50, 0xaa, 0x1c, 0x48, 0x84, 0x7a, 0x29, 0x91, 0x1f, 0xa6,
	0x24, 0x9b, 0x95, 0xc9, 0xde, 0xdc, 0xe1, 0xae, 0xd7, 0x81, 0xb7, 0xa0, 0x90, 0xc7, 0x21, 0x9b,
	0xf0, 0xfe, 0xf1, 0x6b, 0x10, 0x64, 0x3b, 0x08, 0xf2, 0x33, 0x08, 0xf2, 0x31, 0x8a, 0x68, 0x3b,
	0x8a, 0xe8, 0x7b, 0x14, 0xd1, 0x73, 0xfe, 0xa2, 0xb1, 0xe9, 0xab, 0x5c, 0x99, 0x55, 0x51, 0x6d,
	0xe0, 0x5a, 0xb6, 0xb6, 0x91, 0x08, 0x32, 0x50, 0xf1, 0x56, 0xfc, 0x2f, 0x83, 0xef, 0x16, 0x7c,
	0x15, 0x87, 0x59, 0x6e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0xea, 0x19, 0x54, 0x33, 0x01,
	0x00, 0x00,
}

func (m *Publisher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Publisher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Publisher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Respect != 0 {
		i = encodeVarintPublisher(dAtA, i, uint64(m.Respect))
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintPublisher(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.ArticlesCount != 0 {
		i = encodeVarintPublisher(dAtA, i, uint64(m.ArticlesCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPublisher(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPublisher(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPublisher(dAtA []byte, offset int, v uint64) int {
	offset -= sovPublisher(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Publisher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPublisher(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPublisher(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.ArticlesCount != 0 {
		n += 1 + sovPublisher(uint64(m.ArticlesCount))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPublisher(uint64(m.CreatedAt))
	}
	if m.Respect != 0 {
		n += 1 + sovPublisher(uint64(m.Respect))
	}
	return n
}

func sovPublisher(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPublisher(x uint64) (n int) {
	return sovPublisher(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Publisher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPublisher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Publisher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Publisher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublisher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPublisher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPublisher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticlesCount", wireType)
			}
			m.ArticlesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticlesCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Respect", wireType)
			}
			m.Respect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Respect |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPublisher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPublisher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPublisher(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPublisher
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPublisher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPublisher
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPublisher
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPublisher
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPublisher        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPublisher          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPublisher = fmt.Errorf("proto: unexpected end of group")
)
