// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rewards/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetStakingRewardRequest struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (m *QueryGetStakingRewardRequest) Reset()         { *m = QueryGetStakingRewardRequest{} }
func (m *QueryGetStakingRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakingRewardRequest) ProtoMessage()    {}
func (*QueryGetStakingRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{2}
}
func (m *QueryGetStakingRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakingRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakingRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakingRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakingRewardRequest.Merge(m, src)
}
func (m *QueryGetStakingRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakingRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakingRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakingRewardRequest proto.InternalMessageInfo

func (m *QueryGetStakingRewardRequest) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type QueryGetStakingRewardResponse struct {
	StakingReward StakingReward `protobuf:"bytes,1,opt,name=staking_reward,json=stakingReward,proto3" json:"staking_reward"`
}

func (m *QueryGetStakingRewardResponse) Reset()         { *m = QueryGetStakingRewardResponse{} }
func (m *QueryGetStakingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakingRewardResponse) ProtoMessage()    {}
func (*QueryGetStakingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{3}
}
func (m *QueryGetStakingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakingRewardResponse.Merge(m, src)
}
func (m *QueryGetStakingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakingRewardResponse proto.InternalMessageInfo

func (m *QueryGetStakingRewardResponse) GetStakingReward() StakingReward {
	if m != nil {
		return m.StakingReward
	}
	return StakingReward{}
}

type QueryAllStakingRewardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakingRewardRequest) Reset()         { *m = QueryAllStakingRewardRequest{} }
func (m *QueryAllStakingRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingRewardRequest) ProtoMessage()    {}
func (*QueryAllStakingRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{4}
}
func (m *QueryAllStakingRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingRewardRequest.Merge(m, src)
}
func (m *QueryAllStakingRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingRewardRequest proto.InternalMessageInfo

func (m *QueryAllStakingRewardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStakingRewardResponse struct {
	List       []StakingReward     `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakingRewardResponse) Reset()         { *m = QueryAllStakingRewardResponse{} }
func (m *QueryAllStakingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingRewardResponse) ProtoMessage()    {}
func (*QueryAllStakingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{5}
}
func (m *QueryAllStakingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingRewardResponse.Merge(m, src)
}
func (m *QueryAllStakingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingRewardResponse proto.InternalMessageInfo

func (m *QueryAllStakingRewardResponse) GetList() []StakingReward {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryAllStakingRewardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTradingRewardRequest struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (m *QueryGetTradingRewardRequest) Reset()         { *m = QueryGetTradingRewardRequest{} }
func (m *QueryGetTradingRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingRewardRequest) ProtoMessage()    {}
func (*QueryGetTradingRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{6}
}
func (m *QueryGetTradingRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingRewardRequest.Merge(m, src)
}
func (m *QueryGetTradingRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingRewardRequest proto.InternalMessageInfo

func (m *QueryGetTradingRewardRequest) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type QueryGetTradingRewardResponse struct {
	TradingReward TradingReward `protobuf:"bytes,1,opt,name=trading_reward,json=tradingReward,proto3" json:"trading_reward"`
}

func (m *QueryGetTradingRewardResponse) Reset()         { *m = QueryGetTradingRewardResponse{} }
func (m *QueryGetTradingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingRewardResponse) ProtoMessage()    {}
func (*QueryGetTradingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{7}
}
func (m *QueryGetTradingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingRewardResponse.Merge(m, src)
}
func (m *QueryGetTradingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingRewardResponse proto.InternalMessageInfo

func (m *QueryGetTradingRewardResponse) GetTradingReward() TradingReward {
	if m != nil {
		return m.TradingReward
	}
	return TradingReward{}
}

type QueryAllTradingRewardRequest struct {
	State      string             `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradingRewardRequest) Reset()         { *m = QueryAllTradingRewardRequest{} }
func (m *QueryAllTradingRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradingRewardRequest) ProtoMessage()    {}
func (*QueryAllTradingRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{8}
}
func (m *QueryAllTradingRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradingRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradingRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradingRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradingRewardRequest.Merge(m, src)
}
func (m *QueryAllTradingRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradingRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradingRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradingRewardRequest proto.InternalMessageInfo

func (m *QueryAllTradingRewardRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *QueryAllTradingRewardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTradingRewardResponse struct {
	List       []TradingReward     `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradingRewardResponse) Reset()         { *m = QueryAllTradingRewardResponse{} }
func (m *QueryAllTradingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradingRewardResponse) ProtoMessage()    {}
func (*QueryAllTradingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{9}
}
func (m *QueryAllTradingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradingRewardResponse.Merge(m, src)
}
func (m *QueryAllTradingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradingRewardResponse proto.InternalMessageInfo

func (m *QueryAllTradingRewardResponse) GetList() []TradingReward {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryAllTradingRewardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStakingRewardParticipantRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStakingRewardParticipantRequest) Reset() {
	*m = QueryGetStakingRewardParticipantRequest{}
}
func (m *QueryGetStakingRewardParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakingRewardParticipantRequest) ProtoMessage()    {}
func (*QueryGetStakingRewardParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{10}
}
func (m *QueryGetStakingRewardParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakingRewardParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakingRewardParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakingRewardParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakingRewardParticipantRequest.Merge(m, src)
}
func (m *QueryGetStakingRewardParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakingRewardParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakingRewardParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakingRewardParticipantRequest proto.InternalMessageInfo

func (m *QueryGetStakingRewardParticipantRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetStakingRewardParticipantRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStakingRewardParticipantResponse struct {
	List       []StakingRewardParticipant `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Pagination *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStakingRewardParticipantResponse) Reset() {
	*m = QueryGetStakingRewardParticipantResponse{}
}
func (m *QueryGetStakingRewardParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakingRewardParticipantResponse) ProtoMessage()    {}
func (*QueryGetStakingRewardParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{11}
}
func (m *QueryGetStakingRewardParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakingRewardParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakingRewardParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakingRewardParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakingRewardParticipantResponse.Merge(m, src)
}
func (m *QueryGetStakingRewardParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakingRewardParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakingRewardParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakingRewardParticipantResponse proto.InternalMessageInfo

func (m *QueryGetStakingRewardParticipantResponse) GetList() []StakingRewardParticipant {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryGetStakingRewardParticipantResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStakingRewardParticipantRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakingRewardParticipantRequest) Reset() {
	*m = QueryAllStakingRewardParticipantRequest{}
}
func (m *QueryAllStakingRewardParticipantRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingRewardParticipantRequest) ProtoMessage()    {}
func (*QueryAllStakingRewardParticipantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{12}
}
func (m *QueryAllStakingRewardParticipantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingRewardParticipantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingRewardParticipantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingRewardParticipantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingRewardParticipantRequest.Merge(m, src)
}
func (m *QueryAllStakingRewardParticipantRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingRewardParticipantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingRewardParticipantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingRewardParticipantRequest proto.InternalMessageInfo

func (m *QueryAllStakingRewardParticipantRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStakingRewardParticipantResponse struct {
	List       []StakingRewardParticipant `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Pagination *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakingRewardParticipantResponse) Reset() {
	*m = QueryAllStakingRewardParticipantResponse{}
}
func (m *QueryAllStakingRewardParticipantResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingRewardParticipantResponse) ProtoMessage()    {}
func (*QueryAllStakingRewardParticipantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ddc078ee02fb5e8, []int{13}
}
func (m *QueryAllStakingRewardParticipantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingRewardParticipantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingRewardParticipantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingRewardParticipantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingRewardParticipantResponse.Merge(m, src)
}
func (m *QueryAllStakingRewardParticipantResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingRewardParticipantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingRewardParticipantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingRewardParticipantResponse proto.InternalMessageInfo

func (m *QueryAllStakingRewardParticipantResponse) GetList() []StakingRewardParticipant {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *QueryAllStakingRewardParticipantResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "bze.v1.rewards.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bze.v1.rewards.QueryParamsResponse")
	proto.RegisterType((*QueryGetStakingRewardRequest)(nil), "bze.v1.rewards.QueryGetStakingRewardRequest")
	proto.RegisterType((*QueryGetStakingRewardResponse)(nil), "bze.v1.rewards.QueryGetStakingRewardResponse")
	proto.RegisterType((*QueryAllStakingRewardRequest)(nil), "bze.v1.rewards.QueryAllStakingRewardRequest")
	proto.RegisterType((*QueryAllStakingRewardResponse)(nil), "bze.v1.rewards.QueryAllStakingRewardResponse")
	proto.RegisterType((*QueryGetTradingRewardRequest)(nil), "bze.v1.rewards.QueryGetTradingRewardRequest")
	proto.RegisterType((*QueryGetTradingRewardResponse)(nil), "bze.v1.rewards.QueryGetTradingRewardResponse")
	proto.RegisterType((*QueryAllTradingRewardRequest)(nil), "bze.v1.rewards.QueryAllTradingRewardRequest")
	proto.RegisterType((*QueryAllTradingRewardResponse)(nil), "bze.v1.rewards.QueryAllTradingRewardResponse")
	proto.RegisterType((*QueryGetStakingRewardParticipantRequest)(nil), "bze.v1.rewards.QueryGetStakingRewardParticipantRequest")
	proto.RegisterType((*QueryGetStakingRewardParticipantResponse)(nil), "bze.v1.rewards.QueryGetStakingRewardParticipantResponse")
	proto.RegisterType((*QueryAllStakingRewardParticipantRequest)(nil), "bze.v1.rewards.QueryAllStakingRewardParticipantRequest")
	proto.RegisterType((*QueryAllStakingRewardParticipantResponse)(nil), "bze.v1.rewards.QueryAllStakingRewardParticipantResponse")
}

func init() { proto.RegisterFile("rewards/query.proto", fileDescriptor_5ddc078ee02fb5e8) }

var fileDescriptor_5ddc078ee02fb5e8 = []byte{
	// 785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xc1, 0x4f, 0x13, 0x4f,
	0x14, 0xc7, 0x3b, 0xfc, 0x80, 0x9f, 0x8c, 0x81, 0x90, 0xa1, 0x21, 0x4d, 0x81, 0x95, 0xac, 0x09,
	0x34, 0x08, 0xbb, 0x29, 0x10, 0x31, 0xd1, 0x0b, 0x1c, 0x20, 0xea, 0x05, 0xab, 0x27, 0x2f, 0x64,
	0x4a, 0xc7, 0x65, 0xc3, 0xb2, 0xbb, 0xdd, 0x19, 0x50, 0x40, 0x2e, 0x5e, 0xbd, 0x18, 0x3d, 0x78,
	0x54, 0xff, 0x0a, 0xff, 0x02, 0x13, 0x12, 0x2f, 0x24, 0x5e, 0x3c, 0x19, 0x03, 0xfe, 0x21, 0xa6,
	0x33, 0xb3, 0xb4, 0xb3, 0xdd, 0x69, 0x17, 0x53, 0x13, 0x6f, 0xdd, 0x99, 0xf7, 0xe6, 0x7d, 0xde,
	0xf7, 0xcd, 0xbc, 0x57, 0x38, 0x16, 0x91, 0xe7, 0x38, 0xaa, 0x51, 0xbb, 0xbe, 0x4f, 0xa2, 0x43,
	0x2b, 0x8c, 0x02, 0x16, 0xa0, 0x91, 0xea, 0x11, 0xb1, 0x0e, 0xca, 0x96, 0xdc, 0x2b, 0xe6, 0x9d,
	0xc0, 0x09, 0xf8, 0x96, 0xdd, 0xf8, 0x25, 0xac, 0x8a, 0x93, 0x4e, 0x10, 0x38, 0x1e, 0xb1, 0x71,
	0xe8, 0xda, 0xd8, 0xf7, 0x03, 0x86, 0x99, 0x1b, 0xf8, 0x54, 0xee, 0xce, 0x6d, 0x07, 0x74, 0x2f,
	0xa0, 0x76, 0x15, 0x53, 0x22, 0x0e, 0xb7, 0x0f, 0xca, 0x55, 0xc2, 0x70, 0xd9, 0x0e, 0xb1, 0xe3,
	0xfa, 0xdc, 0x58, 0xda, 0xe6, 0x63, 0x88, 0x10, 0x47, 0x78, 0x2f, 0x3e, 0x61, 0x32, 0x5e, 0xa5,
	0x0c, 0xef, 0xba, 0xbe, 0xb3, 0x25, 0xbe, 0x93, 0xbb, 0x2c, 0xc2, 0xb5, 0xb6, 0xdd, 0x52, 0xba,
	0xef, 0x56, 0x88, 0x23, 0xe6, 0x6e, 0xbb, 0x21, 0xf6, 0x99, 0xb0, 0x34, 0xf3, 0x10, 0x3d, 0x6a,
	0xd0, 0x6d, 0xf2, 0xd0, 0x15, 0x52, 0xdf, 0x27, 0x94, 0x99, 0x0f, 0xe1, 0x98, 0xb2, 0x4a, 0xc3,
	0xc0, 0xa7, 0x04, 0x2d, 0xc3, 0x41, 0x81, 0x58, 0x00, 0xd3, 0xa0, 0x74, 0x7d, 0x71, 0xdc, 0x52,
	0x95, 0xb2, 0x84, 0xfd, 0x5a, 0xff, 0xe9, 0x8f, 0x1b, 0xb9, 0x8a, 0xb4, 0x35, 0xef, 0xc2, 0x49,
	0x7e, 0xd8, 0x06, 0x61, 0x8f, 0x05, 0x4e, 0x85, 0x9b, 0xcb, 0x60, 0x68, 0x02, 0x0e, 0x49, 0x3c,
	0xb7, 0xc6, 0x0f, 0x1e, 0xaa, 0x5c, 0x13, 0x0b, 0xf7, 0x6b, 0xe6, 0x2e, 0x9c, 0xd2, 0x38, 0x4b,
	0xa6, 0x07, 0x70, 0x44, 0x4d, 0x52, 0xb2, 0x4d, 0x25, 0xd9, 0x14, 0x77, 0x89, 0x38, 0x4c, 0x5b,
	0x17, 0xcd, 0x67, 0x92, 0x74, 0xd5, 0xf3, 0x52, 0x49, 0xd7, 0x21, 0x6c, 0x16, 0x4f, 0xc6, 0x99,
	0xb1, 0x44, 0xa5, 0xad, 0x46, 0xa5, 0x2d, 0x71, 0x8d, 0x64, 0xa5, 0xad, 0x4d, 0xec, 0x10, 0xe9,
	0x5b, 0x69, 0xf1, 0x34, 0x3f, 0x01, 0x99, 0x55, 0x7b, 0x20, 0x99, 0xd5, 0x0a, 0xec, 0xf7, 0x5c,
	0xca, 0x0a, 0x60, 0xfa, 0xbf, 0xac, 0xb9, 0x70, 0x07, 0xb4, 0xa1, 0x20, 0xf6, 0x71, 0xc4, 0xd9,
	0xae, 0x88, 0x22, 0xaa, 0xc2, 0xd8, 0x52, 0xb5, 0x27, 0xe2, 0x8a, 0xfd, 0x59, 0xd5, 0x12, 0xce,
	0xcd, 0xaa, 0xa9, 0x17, 0x57, 0x57, 0x35, 0xc5, 0x3d, 0xae, 0x1a, 0x6b, 0x5d, 0x34, 0x5f, 0x36,
	0xab, 0x96, 0x4a, 0x9a, 0x87, 0x03, 0x94, 0x61, 0x46, 0x24, 0xa5, 0xf8, 0x48, 0xd4, 0xb2, 0xaf,
	0x27, 0xb5, 0x4c, 0xcf, 0xb5, 0x4b, 0x2d, 0xd3, 0x32, 0xec, 0x71, 0x2d, 0x5f, 0x03, 0x38, 0x9b,
	0xfa, 0x8a, 0x36, 0x9b, 0xfd, 0x20, 0x56, 0xab, 0x00, 0xff, 0xc7, 0xb5, 0x5a, 0x44, 0x28, 0x95,
	0x7a, 0xc5, 0x9f, 0x3d, 0x53, 0xec, 0x33, 0x80, 0xa5, 0xee, 0x34, 0x52, 0xbc, 0x35, 0x45, 0xbc,
	0x52, 0xc7, 0x87, 0xd0, 0xe2, 0xff, 0x77, 0x74, 0xac, 0x4b, 0x19, 0x93, 0xcf, 0x36, 0x45, 0xc6,
	0x5e, 0xb5, 0x8a, 0x4b, 0xb1, 0x3a, 0xc6, 0xfc, 0x07, 0xc5, 0x5a, 0x7c, 0x3b, 0x04, 0x07, 0x38,
	0x39, 0xaa, 0xc3, 0x41, 0x31, 0x18, 0x90, 0x99, 0x44, 0x6a, 0x9f, 0x3d, 0xc5, 0x9b, 0x1d, 0x6d,
	0x44, 0x20, 0xd3, 0x78, 0xf5, 0xed, 0xd7, 0xbb, 0xbe, 0x02, 0x1a, 0xb7, 0xab, 0x47, 0xc4, 0x8e,
	0xa7, 0xdd, 0x41, 0x59, 0x8e, 0x50, 0xf4, 0x11, 0xc0, 0x61, 0x25, 0x5d, 0x34, 0x9f, 0x7a, 0xac,
	0x66, 0x26, 0x15, 0x17, 0x32, 0x5a, 0x4b, 0x9c, 0x45, 0x8e, 0x33, 0x8f, 0xe6, 0x92, 0x38, 0xea,
	0x68, 0xb2, 0x8f, 0x2f, 0x5b, 0xe6, 0x09, 0x7a, 0x0f, 0xe0, 0xa8, 0x72, 0xda, 0xaa, 0xe7, 0x69,
	0x28, 0x35, 0xf3, 0x48, 0x43, 0xa9, 0x1b, 0x2a, 0xe6, 0x0c, 0xa7, 0x9c, 0x46, 0x46, 0x67, 0x4a,
	0x2e, 0x9e, 0xd2, 0x95, 0xf4, 0xe2, 0xa5, 0x35, 0x5c, 0xbd, 0x78, 0xa9, 0xfd, 0x51, 0x2f, 0x9e,
	0x3a, 0x21, 0x14, 0xf1, 0x3e, 0x00, 0x38, 0xaa, 0x9c, 0xd6, 0x51, 0xbc, 0x2b, 0x50, 0xea, 0xba,
	0xb8, 0x69, 0x71, 0xca, 0x12, 0x9a, 0xe9, 0x46, 0xc9, 0xc7, 0xcb, 0x09, 0xfa, 0x0a, 0x60, 0x41,
	0xf7, 0xe0, 0xd0, 0x4a, 0xa6, 0xeb, 0xd5, 0xde, 0x56, 0x8a, 0x77, 0xae, 0xee, 0x28, 0xf9, 0xef,
	0x71, 0xfe, 0xdb, 0x68, 0xb9, 0x73, 0xf1, 0x5b, 0xff, 0x22, 0xda, 0xc7, 0xb2, 0xf5, 0x9f, 0xa0,
	0x2f, 0x00, 0x4e, 0xe8, 0x42, 0x34, 0xa4, 0x5f, 0xc9, 0x74, 0x13, 0x33, 0x27, 0x94, 0xa1, 0xd9,
	0x99, 0x4b, 0x3c, 0xa1, 0x05, 0x74, 0x2b, 0x7b, 0x42, 0x74, 0x6d, 0xfd, 0xf4, 0xdc, 0x00, 0x67,
	0xe7, 0x06, 0xf8, 0x79, 0x6e, 0x80, 0x37, 0x17, 0x46, 0xee, 0xec, 0xc2, 0xc8, 0x7d, 0xbf, 0x30,
	0x72, 0x4f, 0xe7, 0x1d, 0x97, 0xed, 0xec, 0x57, 0xad, 0xed, 0x60, 0xaf, 0x71, 0xe0, 0x02, 0xf6,
	0xc2, 0x1d, 0xcc, 0x08, 0xe6, 0x5f, 0xf6, 0x8b, 0xcb, 0x00, 0xec, 0x30, 0x24, 0xb4, 0x3a, 0xc8,
	0xff, 0x3d, 0x2f, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xf2, 0x7c, 0x09, 0x40, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a StakingReward by index.
	StakingReward(ctx context.Context, in *QueryGetStakingRewardRequest, opts ...grpc.CallOption) (*QueryGetStakingRewardResponse, error)
	// Queries a list of StakingReward items.
	StakingRewardAll(ctx context.Context, in *QueryAllStakingRewardRequest, opts ...grpc.CallOption) (*QueryAllStakingRewardResponse, error)
	// Queries a TradingReward by index.
	TradingReward(ctx context.Context, in *QueryGetTradingRewardRequest, opts ...grpc.CallOption) (*QueryGetTradingRewardResponse, error)
	// Queries a list of TradingReward items.
	TradingRewardAll(ctx context.Context, in *QueryAllTradingRewardRequest, opts ...grpc.CallOption) (*QueryAllTradingRewardResponse, error)
	// Queries a StakingRewardParticipant by index.
	StakingRewardParticipant(ctx context.Context, in *QueryGetStakingRewardParticipantRequest, opts ...grpc.CallOption) (*QueryGetStakingRewardParticipantResponse, error)
	// Queries a list of StakingRewardParticipant items.
	StakingRewardParticipantAll(ctx context.Context, in *QueryAllStakingRewardParticipantRequest, opts ...grpc.CallOption) (*QueryAllStakingRewardParticipantResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bze.v1.rewards.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakingReward(ctx context.Context, in *QueryGetStakingRewardRequest, opts ...grpc.CallOption) (*QueryGetStakingRewardResponse, error) {
	out := new(QueryGetStakingRewardResponse)
	err := c.cc.Invoke(ctx, "/bze.v1.rewards.Query/StakingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakingRewardAll(ctx context.Context, in *QueryAllStakingRewardRequest, opts ...grpc.CallOption) (*QueryAllStakingRewardResponse, error) {
	out := new(QueryAllStakingRewardResponse)
	err := c.cc.Invoke(ctx, "/bze.v1.rewards.Query/StakingRewardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingReward(ctx context.Context, in *QueryGetTradingRewardRequest, opts ...grpc.CallOption) (*QueryGetTradingRewardResponse, error) {
	out := new(QueryGetTradingRewardResponse)
	err := c.cc.Invoke(ctx, "/bze.v1.rewards.Query/TradingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingRewardAll(ctx context.Context, in *QueryAllTradingRewardRequest, opts ...grpc.CallOption) (*QueryAllTradingRewardResponse, error) {
	out := new(QueryAllTradingRewardResponse)
	err := c.cc.Invoke(ctx, "/bze.v1.rewards.Query/TradingRewardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakingRewardParticipant(ctx context.Context, in *QueryGetStakingRewardParticipantRequest, opts ...grpc.CallOption) (*QueryGetStakingRewardParticipantResponse, error) {
	out := new(QueryGetStakingRewardParticipantResponse)
	err := c.cc.Invoke(ctx, "/bze.v1.rewards.Query/StakingRewardParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakingRewardParticipantAll(ctx context.Context, in *QueryAllStakingRewardParticipantRequest, opts ...grpc.CallOption) (*QueryAllStakingRewardParticipantResponse, error) {
	out := new(QueryAllStakingRewardParticipantResponse)
	err := c.cc.Invoke(ctx, "/bze.v1.rewards.Query/StakingRewardParticipantAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a StakingReward by index.
	StakingReward(context.Context, *QueryGetStakingRewardRequest) (*QueryGetStakingRewardResponse, error)
	// Queries a list of StakingReward items.
	StakingRewardAll(context.Context, *QueryAllStakingRewardRequest) (*QueryAllStakingRewardResponse, error)
	// Queries a TradingReward by index.
	TradingReward(context.Context, *QueryGetTradingRewardRequest) (*QueryGetTradingRewardResponse, error)
	// Queries a list of TradingReward items.
	TradingRewardAll(context.Context, *QueryAllTradingRewardRequest) (*QueryAllTradingRewardResponse, error)
	// Queries a StakingRewardParticipant by index.
	StakingRewardParticipant(context.Context, *QueryGetStakingRewardParticipantRequest) (*QueryGetStakingRewardParticipantResponse, error)
	// Queries a list of StakingRewardParticipant items.
	StakingRewardParticipantAll(context.Context, *QueryAllStakingRewardParticipantRequest) (*QueryAllStakingRewardParticipantResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StakingReward(ctx context.Context, req *QueryGetStakingRewardRequest) (*QueryGetStakingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingReward not implemented")
}
func (*UnimplementedQueryServer) StakingRewardAll(ctx context.Context, req *QueryAllStakingRewardRequest) (*QueryAllStakingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingRewardAll not implemented")
}
func (*UnimplementedQueryServer) TradingReward(ctx context.Context, req *QueryGetTradingRewardRequest) (*QueryGetTradingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingReward not implemented")
}
func (*UnimplementedQueryServer) TradingRewardAll(ctx context.Context, req *QueryAllTradingRewardRequest) (*QueryAllTradingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingRewardAll not implemented")
}
func (*UnimplementedQueryServer) StakingRewardParticipant(ctx context.Context, req *QueryGetStakingRewardParticipantRequest) (*QueryGetStakingRewardParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingRewardParticipant not implemented")
}
func (*UnimplementedQueryServer) StakingRewardParticipantAll(ctx context.Context, req *QueryAllStakingRewardParticipantRequest) (*QueryAllStakingRewardParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakingRewardParticipantAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.v1.rewards.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.v1.rewards.Query/StakingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakingReward(ctx, req.(*QueryGetStakingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakingRewardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakingRewardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.v1.rewards.Query/StakingRewardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakingRewardAll(ctx, req.(*QueryAllStakingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.v1.rewards.Query/TradingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingReward(ctx, req.(*QueryGetTradingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingRewardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTradingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingRewardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.v1.rewards.Query/TradingRewardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingRewardAll(ctx, req.(*QueryAllTradingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakingRewardParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakingRewardParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakingRewardParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.v1.rewards.Query/StakingRewardParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakingRewardParticipant(ctx, req.(*QueryGetStakingRewardParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakingRewardParticipantAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakingRewardParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakingRewardParticipantAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.v1.rewards.Query/StakingRewardParticipantAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakingRewardParticipantAll(ctx, req.(*QueryAllStakingRewardParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bze.v1.rewards.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StakingReward",
			Handler:    _Query_StakingReward_Handler,
		},
		{
			MethodName: "StakingRewardAll",
			Handler:    _Query_StakingRewardAll_Handler,
		},
		{
			MethodName: "TradingReward",
			Handler:    _Query_TradingReward_Handler,
		},
		{
			MethodName: "TradingRewardAll",
			Handler:    _Query_TradingRewardAll_Handler,
		},
		{
			MethodName: "StakingRewardParticipant",
			Handler:    _Query_StakingRewardParticipant_Handler,
		},
		{
			MethodName: "StakingRewardParticipantAll",
			Handler:    _Query_StakingRewardParticipantAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rewards/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStakingRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakingRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakingRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakingReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TradingReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTradingRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradingRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradingRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTradingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakingRewardParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakingRewardParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakingRewardParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakingRewardParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakingRewardParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakingRewardParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingRewardParticipantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingRewardParticipantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingRewardParticipantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingRewardParticipantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingRewardParticipantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingRewardParticipantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStakingRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStakingRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TradingReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTradingRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTradingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakingRewardParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakingRewardParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakingRewardParticipantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakingRewardParticipantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakingRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakingRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakingRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, StakingReward{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradingReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradingRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradingRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradingRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, TradingReward{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakingRewardParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakingRewardParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakingRewardParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakingRewardParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakingRewardParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakingRewardParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, StakingRewardParticipant{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingRewardParticipantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingRewardParticipantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingRewardParticipantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingRewardParticipantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingRewardParticipantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingRewardParticipantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, StakingRewardParticipant{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
