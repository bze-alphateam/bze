// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rewards/trading_reward.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradingReward struct {
	RewardId    string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	PrizeAmount string `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom  string `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	Duration    uint32 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	MarketId    string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Slots       uint32 `protobuf:"varint,6,opt,name=slots,proto3" json:"slots,omitempty"`
	ExpireAt    uint32 `protobuf:"varint,7,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (m *TradingReward) Reset()         { *m = TradingReward{} }
func (m *TradingReward) String() string { return proto.CompactTextString(m) }
func (*TradingReward) ProtoMessage()    {}
func (*TradingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96afcb90471b82d, []int{0}
}
func (m *TradingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingReward.Merge(m, src)
}
func (m *TradingReward) XXX_Size() int {
	return m.Size()
}
func (m *TradingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingReward.DiscardUnknown(m)
}

var xxx_messageInfo_TradingReward proto.InternalMessageInfo

func (m *TradingReward) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *TradingReward) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *TradingReward) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *TradingReward) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TradingReward) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradingReward) GetSlots() uint32 {
	if m != nil {
		return m.Slots
	}
	return 0
}

func (m *TradingReward) GetExpireAt() uint32 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

type TradingRewardExpiration struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	ExpireAt uint32 `protobuf:"varint,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (m *TradingRewardExpiration) Reset()         { *m = TradingRewardExpiration{} }
func (m *TradingRewardExpiration) String() string { return proto.CompactTextString(m) }
func (*TradingRewardExpiration) ProtoMessage()    {}
func (*TradingRewardExpiration) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96afcb90471b82d, []int{1}
}
func (m *TradingRewardExpiration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardExpiration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardExpiration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardExpiration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardExpiration.Merge(m, src)
}
func (m *TradingRewardExpiration) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardExpiration) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardExpiration.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardExpiration proto.InternalMessageInfo

func (m *TradingRewardExpiration) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *TradingRewardExpiration) GetExpireAt() uint32 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

type TradingRewardLeaderboard struct {
	RewardId string                          `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	List     []TradingRewardLeaderboardEntry `protobuf:"bytes,2,rep,name=list,proto3" json:"list"`
}

func (m *TradingRewardLeaderboard) Reset()         { *m = TradingRewardLeaderboard{} }
func (m *TradingRewardLeaderboard) String() string { return proto.CompactTextString(m) }
func (*TradingRewardLeaderboard) ProtoMessage()    {}
func (*TradingRewardLeaderboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96afcb90471b82d, []int{2}
}
func (m *TradingRewardLeaderboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardLeaderboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardLeaderboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardLeaderboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardLeaderboard.Merge(m, src)
}
func (m *TradingRewardLeaderboard) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardLeaderboard) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardLeaderboard.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardLeaderboard proto.InternalMessageInfo

func (m *TradingRewardLeaderboard) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *TradingRewardLeaderboard) GetList() []TradingRewardLeaderboardEntry {
	if m != nil {
		return m.List
	}
	return nil
}

type TradingRewardLeaderboardEntry struct {
	Amount    string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	CreatedAt int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *TradingRewardLeaderboardEntry) Reset()         { *m = TradingRewardLeaderboardEntry{} }
func (m *TradingRewardLeaderboardEntry) String() string { return proto.CompactTextString(m) }
func (*TradingRewardLeaderboardEntry) ProtoMessage()    {}
func (*TradingRewardLeaderboardEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96afcb90471b82d, []int{3}
}
func (m *TradingRewardLeaderboardEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardLeaderboardEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardLeaderboardEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardLeaderboardEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardLeaderboardEntry.Merge(m, src)
}
func (m *TradingRewardLeaderboardEntry) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardLeaderboardEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardLeaderboardEntry.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardLeaderboardEntry proto.InternalMessageInfo

func (m *TradingRewardLeaderboardEntry) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TradingRewardLeaderboardEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TradingRewardLeaderboardEntry) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type TradingRewardCandidate struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TradingRewardCandidate) Reset()         { *m = TradingRewardCandidate{} }
func (m *TradingRewardCandidate) String() string { return proto.CompactTextString(m) }
func (*TradingRewardCandidate) ProtoMessage()    {}
func (*TradingRewardCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96afcb90471b82d, []int{4}
}
func (m *TradingRewardCandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardCandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardCandidate.Merge(m, src)
}
func (m *TradingRewardCandidate) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardCandidate proto.InternalMessageInfo

func (m *TradingRewardCandidate) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *TradingRewardCandidate) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TradingRewardCandidate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MarketIdTradingRewardId struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *MarketIdTradingRewardId) Reset()         { *m = MarketIdTradingRewardId{} }
func (m *MarketIdTradingRewardId) String() string { return proto.CompactTextString(m) }
func (*MarketIdTradingRewardId) ProtoMessage()    {}
func (*MarketIdTradingRewardId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96afcb90471b82d, []int{5}
}
func (m *MarketIdTradingRewardId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketIdTradingRewardId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketIdTradingRewardId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketIdTradingRewardId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketIdTradingRewardId.Merge(m, src)
}
func (m *MarketIdTradingRewardId) XXX_Size() int {
	return m.Size()
}
func (m *MarketIdTradingRewardId) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketIdTradingRewardId.DiscardUnknown(m)
}

var xxx_messageInfo_MarketIdTradingRewardId proto.InternalMessageInfo

func (m *MarketIdTradingRewardId) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *MarketIdTradingRewardId) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func init() {
	proto.RegisterType((*TradingReward)(nil), "bze.v1.rewards.TradingReward")
	proto.RegisterType((*TradingRewardExpiration)(nil), "bze.v1.rewards.TradingRewardExpiration")
	proto.RegisterType((*TradingRewardLeaderboard)(nil), "bze.v1.rewards.TradingRewardLeaderboard")
	proto.RegisterType((*TradingRewardLeaderboardEntry)(nil), "bze.v1.rewards.TradingRewardLeaderboardEntry")
	proto.RegisterType((*TradingRewardCandidate)(nil), "bze.v1.rewards.TradingRewardCandidate")
	proto.RegisterType((*MarketIdTradingRewardId)(nil), "bze.v1.rewards.MarketIdTradingRewardId")
}

func init() { proto.RegisterFile("rewards/trading_reward.proto", fileDescriptor_e96afcb90471b82d) }

var fileDescriptor_e96afcb90471b82d = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x8d, 0x93, 0x34, 0x6d, 0xa6, 0x94, 0x83, 0x55, 0x15, 0xab, 0xd0, 0x6d, 0xc9, 0x29, 0x07,
	0xba, 0x2b, 0xe0, 0x0b, 0x52, 0x28, 0x28, 0x12, 0x5c, 0x16, 0x4e, 0x5c, 0x56, 0xde, 0x7a, 0xb4,
	0xb5, 0x48, 0xd6, 0x2b, 0xaf, 0x03, 0x6d, 0x4e, 0x7c, 0x02, 0x9f, 0xd5, 0x63, 0x8f, 0x1c, 0x10,
	0x42, 0xc9, 0x8f, 0x20, 0xdb, 0x4b, 0x2a, 0x57, 0x4a, 0x73, 0xdb, 0xf7, 0x3c, 0xf3, 0xde, 0xcc,
	0x3e, 0x1b, 0x9e, 0x69, 0xfc, 0xce, 0xb5, 0xa8, 0x13, 0xa3, 0xb9, 0x90, 0x65, 0x91, 0x79, 0x1c,
	0x57, 0x5a, 0x19, 0x45, 0x1f, 0xe7, 0x73, 0x8c, 0xbf, 0xbd, 0x8c, 0x9b, 0xa2, 0xc3, 0xfd, 0x42,
	0x15, 0xca, 0x1d, 0x25, 0xf6, 0xcb, 0x57, 0x0d, 0x7e, 0x13, 0xd8, 0xfb, 0xec, 0xdb, 0x53, 0x57,
	0x48, 0x9f, 0x42, 0xdf, 0xb7, 0x64, 0x52, 0x30, 0x72, 0x42, 0x86, 0xfd, 0x74, 0xc7, 0x13, 0x63,
	0x41, 0x9f, 0xc3, 0xa3, 0x4a, 0xcb, 0x39, 0x66, 0x7c, 0xaa, 0x66, 0xa5, 0x61, 0x6d, 0x77, 0xbe,
	0xeb, 0xb8, 0x91, 0xa3, 0xe8, 0x31, 0x78, 0x98, 0x09, 0x2c, 0xd5, 0x94, 0x75, 0x5c, 0x05, 0x38,
	0xea, 0xad, 0x65, 0xe8, 0x21, 0xec, 0x88, 0x99, 0xe6, 0x46, 0xaa, 0x92, 0x75, 0x4f, 0xc8, 0x70,
	0x2f, 0x5d, 0x61, 0x6b, 0x3e, 0xe5, 0xfa, 0x2b, 0x1a, 0x6b, 0xbe, 0xe5, 0xcd, 0x3d, 0x31, 0x16,
	0x74, 0x1f, 0xb6, 0xea, 0x89, 0x32, 0x35, 0xeb, 0xb9, 0x2e, 0x0f, 0x6c, 0x0b, 0x5e, 0x55, 0x52,
	0x63, 0xc6, 0x0d, 0xdb, 0xf6, 0x7a, 0x9e, 0x18, 0x99, 0xc1, 0x27, 0x78, 0x12, 0x6c, 0x77, 0x6e,
	0x0f, 0x56, 0x56, 0xeb, 0xf7, 0x0c, 0x44, 0xdb, 0xf7, 0x44, 0x7f, 0x10, 0x60, 0x81, 0xea, 0x07,
	0xe4, 0x02, 0x75, 0xae, 0x36, 0xfe, 0xbe, 0xf7, 0xd0, 0x9d, 0xc8, 0xda, 0x2a, 0x76, 0x86, 0xbb,
	0xaf, 0x4e, 0xe3, 0x30, 0xa2, 0x78, 0x9d, 0xe8, 0x79, 0x69, 0xf4, 0xf5, 0x59, 0xf7, 0xe6, 0xcf,
	0x71, 0x2b, 0x75, 0x02, 0x83, 0x0a, 0x8e, 0x1e, 0x2c, 0xa6, 0x07, 0xd0, 0x6b, 0x22, 0xf2, 0x33,
	0x34, 0x88, 0x32, 0xd8, 0xe6, 0x42, 0x68, 0xac, 0xeb, 0x26, 0xbb, 0xff, 0x90, 0x1e, 0x01, 0x5c,
	0x68, 0xe4, 0x06, 0x85, 0xdd, 0xd9, 0xc6, 0xd6, 0x49, 0xfb, 0x0d, 0x33, 0x32, 0x83, 0x02, 0x0e,
	0x02, 0xc7, 0x37, 0xbc, 0x14, 0x52, 0x70, 0x83, 0x0f, 0x6f, 0x7c, 0x37, 0x47, 0x7b, 0xdd, 0x1c,
	0x9d, 0x60, 0x0e, 0x1b, 0xd9, 0xc7, 0x26, 0xf1, 0xc0, 0x70, 0x2c, 0x36, 0x46, 0x76, 0x77, 0x75,
	0xda, 0xe1, 0xd5, 0x39, 0x7b, 0x77, 0xb3, 0x88, 0xc8, 0xed, 0x22, 0x22, 0x7f, 0x17, 0x11, 0xf9,
	0xb9, 0x8c, 0x5a, 0xb7, 0xcb, 0xa8, 0xf5, 0x6b, 0x19, 0xb5, 0xbe, 0xbc, 0x28, 0xa4, 0xb9, 0x9c,
	0xe5, 0xf1, 0x85, 0x9a, 0x26, 0xf9, 0x1c, 0x4f, 0xf9, 0xa4, 0xba, 0xe4, 0x06, 0xb9, 0x43, 0xc9,
	0x55, 0xb2, 0x7a, 0x63, 0xd7, 0x15, 0xd6, 0x79, 0xcf, 0xbd, 0x9a, 0xd7, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x66, 0x54, 0xef, 0x9a, 0x7b, 0x03, 0x00, 0x00,
}

func (m *TradingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpireAt != 0 {
		i = encodeVarintTradingReward(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Slots != 0 {
		i = encodeVarintTradingReward(dAtA, i, uint64(m.Slots))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Duration != 0 {
		i = encodeVarintTradingReward(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardExpiration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardExpiration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardExpiration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpireAt != 0 {
		i = encodeVarintTradingReward(dAtA, i, uint64(m.ExpireAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardLeaderboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardLeaderboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardLeaderboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTradingReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardLeaderboardEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardLeaderboardEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardLeaderboardEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintTradingReward(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardCandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardCandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardCandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketIdTradingRewardId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketIdTradingRewardId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketIdTradingRewardId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradingReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradingReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovTradingReward(uint64(m.Duration))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	if m.Slots != 0 {
		n += 1 + sovTradingReward(uint64(m.Slots))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovTradingReward(uint64(m.ExpireAt))
	}
	return n
}

func (m *TradingRewardExpiration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovTradingReward(uint64(m.ExpireAt))
	}
	return n
}

func (m *TradingRewardLeaderboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTradingReward(uint64(l))
		}
	}
	return n
}

func (m *TradingRewardLeaderboardEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovTradingReward(uint64(m.CreatedAt))
	}
	return n
}

func (m *TradingRewardCandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	return n
}

func (m *MarketIdTradingRewardId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	return n
}

func sovTradingReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradingReward(x uint64) (n int) {
	return sovTradingReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			m.Slots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTradingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardExpiration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardExpiration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardExpiration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTradingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardLeaderboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardLeaderboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardLeaderboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, TradingRewardLeaderboardEntry{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardLeaderboardEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardLeaderboardEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardLeaderboardEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTradingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardCandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardCandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardCandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketIdTradingRewardId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketIdTradingRewardId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketIdTradingRewardId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradingReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradingReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradingReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradingReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradingReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradingReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradingReward = fmt.Errorf("proto: unexpected end of group")
)
