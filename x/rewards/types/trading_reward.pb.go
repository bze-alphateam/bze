// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rewards/trading_reward.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradingReward struct {
	RewardId    string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	PrizeAmount string `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom  string `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	Duration    uint32 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	MarketId    string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Slots       uint32 `protobuf:"varint,6,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (m *TradingReward) Reset()         { *m = TradingReward{} }
func (m *TradingReward) String() string { return proto.CompactTextString(m) }
func (*TradingReward) ProtoMessage()    {}
func (*TradingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_e96afcb90471b82d, []int{0}
}
func (m *TradingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingReward.Merge(m, src)
}
func (m *TradingReward) XXX_Size() int {
	return m.Size()
}
func (m *TradingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingReward.DiscardUnknown(m)
}

var xxx_messageInfo_TradingReward proto.InternalMessageInfo

func (m *TradingReward) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *TradingReward) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *TradingReward) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *TradingReward) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TradingReward) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradingReward) GetSlots() uint32 {
	if m != nil {
		return m.Slots
	}
	return 0
}

func init() {
	proto.RegisterType((*TradingReward)(nil), "bze.v1.rewards.TradingReward")
}

func init() { proto.RegisterFile("rewards/trading_reward.proto", fileDescriptor_e96afcb90471b82d) }

var fileDescriptor_e96afcb90471b82d = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0xa0, 0x55, 0x6b, 0x28, 0x83, 0xc5, 0x60, 0x01, 0x32, 0x85, 0xa9, 0x03, 0x24,
	0x42, 0x3c, 0x01, 0x08, 0x21, 0x75, 0x8d, 0x98, 0x58, 0x22, 0x07, 0x5b, 0xad, 0x45, 0x13, 0x47,
	0xb6, 0xc3, 0x4f, 0x9e, 0x82, 0x37, 0x62, 0x65, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0xb9, 0x17,
	0x65, 0xfc, 0xbe, 0x7b, 0xae, 0x8e, 0x74, 0xe8, 0xa9, 0xd3, 0x6f, 0xd2, 0x29, 0x9f, 0x04, 0x27,
	0x95, 0x29, 0x57, 0x19, 0x72, 0x5c, 0x39, 0x1b, 0x2c, 0x3b, 0xcc, 0x1b, 0x1d, 0xbf, 0x5e, 0xc7,
	0xff, 0xa1, 0x8b, 0x2f, 0x42, 0x67, 0x8f, 0x18, 0x4c, 0x41, 0xb1, 0x13, 0x3a, 0xc5, 0x63, 0x66,
	0x14, 0x27, 0x73, 0xb2, 0x98, 0xa6, 0x13, 0x14, 0x4b, 0xc5, 0xce, 0xe9, 0x41, 0xe5, 0x4c, 0xa3,
	0x33, 0x59, 0xd8, 0xba, 0x0c, 0x7c, 0x07, 0xee, 0xfb, 0xe0, 0x6e, 0x41, 0xb1, 0x33, 0x8a, 0x98,
	0x29, 0x5d, 0xda, 0x82, 0xef, 0x42, 0x82, 0x82, 0xba, 0xef, 0x0d, 0x3b, 0xa6, 0x13, 0x55, 0x3b,
	0x19, 0x8c, 0x2d, 0xf9, 0xde, 0x9c, 0x2c, 0x66, 0xe9, 0xc0, 0x7d, 0x79, 0x21, 0xdd, 0x8b, 0x0e,
	0x7d, 0xf9, 0x08, 0xcb, 0x51, 0x2c, 0x15, 0x3b, 0xa2, 0x23, 0xbf, 0xb1, 0xc1, 0xf3, 0x31, 0x7c,
	0x21, 0xdc, 0x3d, 0x7c, 0xb7, 0x82, 0x6c, 0x5b, 0x41, 0x7e, 0x5b, 0x41, 0x3e, 0x3b, 0x11, 0x6d,
	0x3b, 0x11, 0xfd, 0x74, 0x22, 0x7a, 0xba, 0x5c, 0x99, 0xb0, 0xae, 0xf3, 0xf8, 0xd9, 0x16, 0x49,
	0xde, 0xe8, 0x2b, 0xb9, 0xa9, 0xd6, 0x32, 0x68, 0x09, 0x94, 0xbc, 0x27, 0xc3, 0x50, 0x1f, 0x95,
	0xf6, 0xf9, 0x18, 0x06, 0xba, 0xf9, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x98, 0xd8, 0x03, 0xb5, 0x40,
	0x01, 0x00, 0x00,
}

func (m *TradingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slots != 0 {
		i = encodeVarintTradingReward(dAtA, i, uint64(m.Slots))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Duration != 0 {
		i = encodeVarintTradingReward(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTradingReward(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradingReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradingReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovTradingReward(uint64(m.Duration))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovTradingReward(uint64(l))
	}
	if m.Slots != 0 {
		n += 1 + sovTradingReward(uint64(m.Slots))
	}
	return n
}

func sovTradingReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradingReward(x uint64) (n int) {
	return sovTradingReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			m.Slots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTradingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradingReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradingReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradingReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradingReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradingReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradingReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradingReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradingReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradingReward = fmt.Errorf("proto: unexpected end of group")
)
