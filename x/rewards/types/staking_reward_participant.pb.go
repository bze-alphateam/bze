// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rewards/staking_reward_participant.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakingRewardParticipant struct {
	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RewardId string `protobuf:"bytes,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	JoinedAt string `protobuf:"bytes,4,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
}

func (m *StakingRewardParticipant) Reset()         { *m = StakingRewardParticipant{} }
func (m *StakingRewardParticipant) String() string { return proto.CompactTextString(m) }
func (*StakingRewardParticipant) ProtoMessage()    {}
func (*StakingRewardParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_c38d5e7e7b44d312, []int{0}
}
func (m *StakingRewardParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardParticipant.Merge(m, src)
}
func (m *StakingRewardParticipant) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardParticipant proto.InternalMessageInfo

func (m *StakingRewardParticipant) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StakingRewardParticipant) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingRewardParticipant) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *StakingRewardParticipant) GetJoinedAt() string {
	if m != nil {
		return m.JoinedAt
	}
	return ""
}

type PendingUnlockParticipant struct {
	Index   string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom   string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *PendingUnlockParticipant) Reset()         { *m = PendingUnlockParticipant{} }
func (m *PendingUnlockParticipant) String() string { return proto.CompactTextString(m) }
func (*PendingUnlockParticipant) ProtoMessage()    {}
func (*PendingUnlockParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_c38d5e7e7b44d312, []int{1}
}
func (m *PendingUnlockParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingUnlockParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingUnlockParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingUnlockParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingUnlockParticipant.Merge(m, src)
}
func (m *PendingUnlockParticipant) XXX_Size() int {
	return m.Size()
}
func (m *PendingUnlockParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingUnlockParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_PendingUnlockParticipant proto.InternalMessageInfo

func (m *PendingUnlockParticipant) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *PendingUnlockParticipant) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PendingUnlockParticipant) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *PendingUnlockParticipant) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*StakingRewardParticipant)(nil), "bze.v1.rewards.StakingRewardParticipant")
	proto.RegisterType((*PendingUnlockParticipant)(nil), "bze.v1.rewards.PendingUnlockParticipant")
}

func init() {
	proto.RegisterFile("rewards/staking_reward_participant.proto", fileDescriptor_c38d5e7e7b44d312)
}

var fileDescriptor_c38d5e7e7b44d312 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0x80, 0x73, 0xd5, 0x56, 0x7b, 0x83, 0x43, 0x28, 0x72, 0x20, 0x1c, 0xd2, 0xa9, 0x83, 0x26,
	0x88, 0xbf, 0x40, 0x07, 0xc1, 0xad, 0x54, 0x5c, 0x5c, 0xc2, 0x4b, 0xee, 0x91, 0x9e, 0x6d, 0xee,
	0x42, 0xf2, 0xaa, 0xb1, 0x3f, 0xc0, 0xd9, 0x9f, 0xe5, 0xd8, 0xd1, 0x51, 0x92, 0x3f, 0x22, 0xe6,
	0x52, 0xac, 0x43, 0xc7, 0xef, 0x3d, 0x3e, 0xde, 0xc7, 0xe3, 0x93, 0x02, 0x5f, 0xa1, 0x50, 0x65,
	0x58, 0x12, 0x2c, 0xb4, 0x49, 0x23, 0xc7, 0x51, 0x0e, 0x05, 0xe9, 0x44, 0xe7, 0x60, 0x28, 0xc8,
	0x0b, 0x4b, 0xd6, 0x3f, 0x89, 0xd7, 0x18, 0xbc, 0x5c, 0x05, 0x9d, 0x30, 0x7e, 0x67, 0x5c, 0x3c,
	0x38, 0x69, 0xd6, 0x8e, 0xa6, 0x7f, 0x8a, 0x2f, 0xf8, 0x11, 0x28, 0x55, 0x60, 0x59, 0x0a, 0x76,
	0xce, 0x26, 0xc3, 0xd9, 0x16, 0xfd, 0x33, 0x3e, 0xec, 0x4e, 0x68, 0x25, 0x7a, 0xed, 0xee, 0xd8,
	0x0d, 0xee, 0x95, 0x7f, 0xca, 0x07, 0x90, 0xd9, 0x95, 0x21, 0x71, 0xd0, 0x6e, 0x3a, 0xfa, 0x95,
	0x9e, 0xad, 0x36, 0xa8, 0x22, 0x20, 0x71, 0xe8, 0x24, 0x37, 0xb8, 0xa1, 0x71, 0xc5, 0xc5, 0x14,
	0x8d, 0xd2, 0x26, 0x7d, 0x34, 0x4b, 0x9b, 0x2c, 0x76, 0x3b, 0x46, 0xbc, 0xaf, 0x8d, 0xc2, 0xaa,
	0xab, 0x70, 0xb0, 0x5b, 0xd7, 0xfb, 0x5f, 0xb7, 0x2f, 0x60, 0xc4, 0xfb, 0x0a, 0x8d, 0xcd, 0xba,
	0xe3, 0x0e, 0x6e, 0xef, 0x3e, 0x6b, 0xc9, 0x36, 0xb5, 0x64, 0xdf, 0xb5, 0x64, 0x1f, 0x8d, 0xf4,
	0x36, 0x8d, 0xf4, 0xbe, 0x1a, 0xe9, 0x3d, 0x5d, 0xa4, 0x9a, 0xe6, 0xab, 0x38, 0x48, 0x6c, 0x16,
	0xc6, 0x6b, 0xbc, 0x84, 0x65, 0x3e, 0x07, 0x42, 0x68, 0x29, 0xac, 0xc2, 0xed, 0xd7, 0xe9, 0x2d,
	0xc7, 0x32, 0x1e, 0xb4, 0x1f, 0xbe, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xa1, 0x9f, 0xd7,
	0x8d, 0x01, 0x00, 0x00,
}

func (m *StakingRewardParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JoinedAt) > 0 {
		i -= len(m.JoinedAt)
		copy(dAtA[i:], m.JoinedAt)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.JoinedAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingUnlockParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingUnlockParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingUnlockParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStakingRewardParticipant(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakingRewardParticipant(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakingRewardParticipant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakingRewardParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	l = len(m.JoinedAt)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	return n
}

func (m *PendingUnlockParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovStakingRewardParticipant(uint64(l))
	}
	return n
}

func sovStakingRewardParticipant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakingRewardParticipant(x uint64) (n int) {
	return sovStakingRewardParticipant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakingRewardParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingRewardParticipant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingRewardParticipant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingUnlockParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingRewardParticipant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingUnlockParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingUnlockParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingRewardParticipant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingRewardParticipant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakingRewardParticipant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakingRewardParticipant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingRewardParticipant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakingRewardParticipant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakingRewardParticipant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakingRewardParticipant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakingRewardParticipant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakingRewardParticipant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakingRewardParticipant = fmt.Errorf("proto: unexpected end of group")
)
