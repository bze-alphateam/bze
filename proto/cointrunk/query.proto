syntax = "proto3";
package bze.cointrunk;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cointrunk/params.proto";
import "cointrunk/accepted_domain.proto";
import "cointrunk/publisher.proto";
import "cointrunk/article.proto";
import "cointrunk/burned_coins.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/bze-alphateam/bze/x/cointrunk/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/bze/cointrunk/params";
  }
  // Queries a list of AcceptedDomain items.
	rpc AcceptedDomain(QueryAcceptedDomainRequest) returns (QueryAcceptedDomainResponse) {
		option (google.api.http).get = "/bze/cointrunk/accepted_domain";
	}

// Queries a list of Publisher items.
	rpc Publisher(QueryPublisherRequest) returns (QueryPublisherResponse) {
		option (google.api.http).get = "/bze/cointrunk/publishers";
	}

// Queries publisher by index/address.
	rpc PublisherByIndex(QueryPublisherByIndexRequest) returns (QueryPublisherByIndexResponse) {
		option (google.api.http).get = "/bze/cointrunk/publisher/{index}";
	}

// Queries a list of ArticlesByPrefix items.
	rpc ArticlesByPrefix(QueryArticlesByPrefixRequest) returns (QueryArticlesByPrefixResponse) {
		option (google.api.http).get = "/bze/cointrunk/articles_by_prefix/{prefix}";
	}

// Queries a list of CoinsBurnEvents items.
	rpc AllBurnedCoins(QueryAllBurnedCoinsRequest) returns (QueryAllBurnedCoinsResponse) {
		option (google.api.http).get = "/bze/cointrunk/all_burned_coins";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryAcceptedDomainRequest {
cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAcceptedDomainResponse {
repeated AcceptedDomain acceptedDomain = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPublisherRequest {
cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPublisherResponse {
repeated Publisher publisher = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPublisherByIndexRequest {
	string index = 1;
}

message QueryPublisherByIndexResponse {
	Publisher publisher = 1 [(gogoproto.nullable) = false];
}

message QueryArticlesByPrefixRequest {
  string prefix = 1;
cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryArticlesByPrefixResponse {
	repeated Article article = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllBurnedCoinsRequest {
cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBurnedCoinsResponse {
	repeated BurnedCoins burnedCoins = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
