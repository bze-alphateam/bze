// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateStakingReward } from "./types/rewards/tx";
import { MsgCreateTradingReward } from "./types/rewards/tx";
import { MsgJoinStaking } from "./types/rewards/tx";
import { MsgUpdateStakingReward } from "./types/rewards/tx";
import { MsgClaimStakingRewards } from "./types/rewards/tx";
import { MsgExitStaking } from "./types/rewards/tx";


export { MsgCreateStakingReward, MsgCreateTradingReward, MsgJoinStaking, MsgUpdateStakingReward, MsgClaimStakingRewards, MsgExitStaking };

type sendMsgCreateStakingRewardParams = {
  value: MsgCreateStakingReward,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTradingRewardParams = {
  value: MsgCreateTradingReward,
  fee?: StdFee,
  memo?: string
};

type sendMsgJoinStakingParams = {
  value: MsgJoinStaking,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateStakingRewardParams = {
  value: MsgUpdateStakingReward,
  fee?: StdFee,
  memo?: string
};

type sendMsgClaimStakingRewardsParams = {
  value: MsgClaimStakingRewards,
  fee?: StdFee,
  memo?: string
};

type sendMsgExitStakingParams = {
  value: MsgExitStaking,
  fee?: StdFee,
  memo?: string
};


type msgCreateStakingRewardParams = {
  value: MsgCreateStakingReward,
};

type msgCreateTradingRewardParams = {
  value: MsgCreateTradingReward,
};

type msgJoinStakingParams = {
  value: MsgJoinStaking,
};

type msgUpdateStakingRewardParams = {
  value: MsgUpdateStakingReward,
};

type msgClaimStakingRewardsParams = {
  value: MsgClaimStakingRewards,
};

type msgExitStakingParams = {
  value: MsgExitStaking,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateStakingReward({ value, fee, memo }: sendMsgCreateStakingRewardParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateStakingReward: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateStakingReward({ value: MsgCreateStakingReward.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateStakingReward: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTradingReward({ value, fee, memo }: sendMsgCreateTradingRewardParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTradingReward: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateTradingReward({ value: MsgCreateTradingReward.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTradingReward: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgJoinStaking({ value, fee, memo }: sendMsgJoinStakingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgJoinStaking: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgJoinStaking({ value: MsgJoinStaking.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgJoinStaking: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateStakingReward({ value, fee, memo }: sendMsgUpdateStakingRewardParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateStakingReward: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateStakingReward({ value: MsgUpdateStakingReward.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateStakingReward: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgClaimStakingRewards({ value, fee, memo }: sendMsgClaimStakingRewardsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgClaimStakingRewards: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgClaimStakingRewards({ value: MsgClaimStakingRewards.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgClaimStakingRewards: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgExitStaking({ value, fee, memo }: sendMsgExitStakingParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgExitStaking: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgExitStaking({ value: MsgExitStaking.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgExitStaking: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateStakingReward({ value }: msgCreateStakingRewardParams): EncodeObject {
			try {
				return { typeUrl: "/bze.v1.rewards.MsgCreateStakingReward", value: MsgCreateStakingReward.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateStakingReward: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTradingReward({ value }: msgCreateTradingRewardParams): EncodeObject {
			try {
				return { typeUrl: "/bze.v1.rewards.MsgCreateTradingReward", value: MsgCreateTradingReward.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTradingReward: Could not create message: ' + e.message)
			}
		},
		
		msgJoinStaking({ value }: msgJoinStakingParams): EncodeObject {
			try {
				return { typeUrl: "/bze.v1.rewards.MsgJoinStaking", value: MsgJoinStaking.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgJoinStaking: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateStakingReward({ value }: msgUpdateStakingRewardParams): EncodeObject {
			try {
				return { typeUrl: "/bze.v1.rewards.MsgUpdateStakingReward", value: MsgUpdateStakingReward.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateStakingReward: Could not create message: ' + e.message)
			}
		},
		
		msgClaimStakingRewards({ value }: msgClaimStakingRewardsParams): EncodeObject {
			try {
				return { typeUrl: "/bze.v1.rewards.MsgClaimStakingRewards", value: MsgClaimStakingRewards.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgClaimStakingRewards: Could not create message: ' + e.message)
			}
		},
		
		msgExitStaking({ value }: msgExitStakingParams): EncodeObject {
			try {
				return { typeUrl: "/bze.v1.rewards.MsgExitStaking", value: MsgExitStaking.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgExitStaking: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			BzeV1Rewards: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;